import React, { useEffect, useState } from "react";
import { Flex } from "@chakra-ui/react";
import { TimerCounter, ActionButtons } from "@/components/timer";

import { hourOptions, secAndMinOptions } from "@/constants/timer";
import Head from "next/head";
import SelectContainer from "./SelectContainer";

export interface TimerOption {
  label: string;
  value: number;
}

export interface Time {
  hour: TimerOption;
  min: TimerOption;
  sec: TimerOption;
}

function Timer() {
  const [isRunning, setIsRunning] = useState<boolean>(false);
  const [isPaused, setIsPaused] = useState<boolean>(false);
  const [time, setTime] = useState<Time>({
    hour: hourOptions[0],
    min: secAndMinOptions[0],
    sec: secAndMinOptions[0],
  });

  useEffect(() => {
    const intervalId = setInterval(() => {
      setTime((prevTime) => {
        if (!isRunning || isPaused) {
          clearInterval(intervalId);
          return prevTime;
        }
        let hour = prevTime.hour.value;
        let min = prevTime.min.value;
        let sec = prevTime.sec.value;

        if (sec === 0) {
          if (min === 0) {
            if (hour === 0) {
              clearInterval(intervalId);
              return prevTime;
            }
            hour -= 1;
            min = 59;
            sec = 59;
          } else {
            min -= 1;
            sec = 59;
          }
        } else {
          sec -= 1;
        }

        return {
          hour: {
            label: hour.toString().padStart(2, "0"),
            value: hour,
          },
          min: {
            label: min.toString().padStart(2, "0"),
            value: min,
          },
          sec: {
            label: sec.toString().padStart(2, "0"),
            value: sec,
          },
        };
      });
    }, 1000);

    return () => clearInterval(intervalId);
  }, [isPaused, isRunning, time]);

  return (
    <>
      <Head>
        <title>
          {isRunning
            ? `${time.hour.label}:${time.min.label}:${time.sec.label}`
            : "타이머 - 코테 준비 타이머"}
        </title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex
        display="flex"
        alignItems="center"
        h="85px"
        gap="10px"
        margin="0 auto"
      >
        {isRunning ? (
          <TimerCounter time={time} />
        ) : (
          <SelectContainer time={time} setTime={setTime} />
        )}
      </Flex>
      <ActionButtons
        isRunning={isRunning}
        setIsRunning={setIsRunning}
        isPaused={isPaused}
        setIsPaused={setIsPaused}
      />
    </>
  );
}

export default Timer;
