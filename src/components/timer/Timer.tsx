import React, { useEffect, useRef, useState } from "react";
import { Flex } from "@chakra-ui/react";
import { TimerCounter, ActionButtons } from "@/components/timer";
import Head from "next/head";
import SelectContainer from "./SelectContainer";

export interface TimerOption {
  label: string;
  value: number;
}

export interface Time {
  hour: number;
  min: number;
  sec: number;
}

function Timer() {
  const [isRunning, setIsRunning] = useState<boolean>(false);
  const [isPaused, setIsPaused] = useState<boolean>(false);
  const [time, setTime] = useState<Time>({
    hour: 0,
    min: 0,
    sec: 0,
  });
  const rafRef = useRef<number>(0);

  const disabled = time.hour === 0 && time.min === 0 && time.sec === 0;

  useEffect(() => {
    return () => cancelAnimationFrame(rafRef.current);
  }, []);

  useEffect(() => {
    let start: number | null = null;
    let elapsed = 0;

    const step = (timestamp: number) => {
      if (!isRunning || isPaused) return;

      if (!start) start = timestamp;

      elapsed = timestamp - start;

      if (elapsed >= 1000) {
        start = timestamp;

        setTime((prevTime: Time) => {
          let { hour, min, sec } = prevTime;

          if (sec === 0) {
            if (min === 0) {
              if (hour === 0) {
                setIsRunning(false);
                return prevTime;
              }
              hour -= 1;
              min = 59;
              sec = 59;
            } else {
              min -= 1;
              sec = 59;
            }
          } else {
            sec -= 1;
          }

          return {
            hour,
            min,
            sec,
          };
        });
      }

      rafRef.current = requestAnimationFrame(step);
    };

    rafRef.current = requestAnimationFrame(step);

    return () => cancelAnimationFrame(rafRef.current);
  }, [isRunning, isPaused]);

  return (
    <>
      <Head>
        <title>
          {isRunning
            ? `${time.hour.toString().padStart(2, "0")}:${time.min
                .toString()
                .padStart(2, "0")}:${time.sec.toString().padStart(2, "0")}`
            : "타이머 - 코테 준비 타이머"}
        </title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex display="flex" alignItems="center" h="85px" gap="10px" m="0 auto">
        {isRunning ? (
          <TimerCounter time={time} />
        ) : (
          <SelectContainer time={time} setTime={setTime} />
        )}
      </Flex>
      <ActionButtons
        isRunning={isRunning}
        setIsRunning={setIsRunning}
        isPaused={isPaused}
        setIsPaused={setIsPaused}
        disabled={disabled}
      />
    </>
  );
}

export default Timer;
